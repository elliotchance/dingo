package: dingotest
services:
  SendEmail:
    type: '*SendEmail'
    interface: EmailSender
    properties:
      From: '"hi@welcome.com"'

  CustomerWelcome:
    type: '*CustomerWelcome'
    returns: NewCustomerWelcome(@{SendEmail})

  WithEnv1:
    type: SendEmail
    properties:
      From: ${ShouldBeSet}

  WithEnv2:
    type: '*SendEmail'
    properties:
      From: '"foo-" + ${ShouldBeSet} + "-bar"'

  SomeEnv:
    type: string
    returns: ${ShouldBeSet}

  Now:
    type: time.Time
    returns: time.Now()
    scope: prototype

  ParsedTime:
    type: time.Time
    scope: prototype
    arguments:
      value: string
    returns: time.Parse(time.RFC822, value)
    error: return time.Now()

  DependsOnTime:
    type: time.Time
    scope: prototype
    returns: '@{ParsedTime("13 Jan 06 15:04 MST")}'

  OtherPkg:
    type: '*github.com/elliotchance/dingo/dingotest/go-sub-pkg.Person'

  OtherPkg2:
    type: '*github.com/elliotchance/dingo/dingotest/go-sub-pkg.Person'
    interface: github.com/elliotchance/dingo/dingotest/go-sub-pkg.Greeter
    returns: go_sub_pkg.NewPerson()

  OtherPkg3:
    type: github.com/elliotchance/dingo/dingotest/go-sub-pkg.Person

  SendEmailError:
    type: '*SendEmail'
    returns: NewSendEmail()
    error: panic(err)

  AFunc:
    type: func (int, int) (bool, bool)
    returns: |
      func (a, b int) (c, d bool) {
        c = (a + b) != 0
        d = @{SomeEnv} != ""

        return
      }

  Clock:
    interface: github.com/jonboulle/clockwork.Clock
    returns: clockwork.NewRealClock()

  WhatsTheTime:
    type: '*WhatsTheTime'
    properties:
      clock: '@{Clock}'

  Signer:
    type: '*Signer'
    scope: prototype        # Create a new Signer each time
    arguments:              # Define the dependencies at runtime.
      req: '*http.Request'
    import:
      - net/http
    returns: NewSigner(req) # Setup code can reference the runtime dependencies.

  HTTPSignerClient:
    type: '*HTTPSignerClient'
    properties:
      CreateSigner: '@{Signer}'

  CustomerWelcomePrototype:
    type: '*CustomerWelcome'
    returns: NewCustomerWelcome(@{SendEmail})
    arguments:
      appid: 'string'
    scope: 'prototype'
  CustomerWelcomePrototype2:
    type: '*CustomerWelcome'
    returns: NewCustomerWelcome(@{SendEmail})
    arguments:
      canaryConfig: '*v1.ObjectMetaAccessor'
    scope: 'prototype'
    import:
      - 'k8s.io/apimachinery/pkg/apis/meta/v1'